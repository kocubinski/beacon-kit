// Code generated by fastssz. DO NOT EDIT.
// Hash: 095cba7ebe3262e30331aba3eae3eda2b6ef8470d23fbaa4c9595f382b4f03f7
// Version: 0.1.3
package testdata

import (
	ssz "github.com/ferranbt/fastssz"
)

// MarshalSSZ ssz marshals the ComplexContainer object
func (c *ComplexContainer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(c)
}

// MarshalSSZTo ssz marshals the ComplexContainer object to a target array
func (c *ComplexContainer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(189)

	// Field (0) 'One'
	dst = ssz.MarshalUint64(dst, c.One)

	// Field (1) 'Bytes42'
	dst = append(dst, c.Bytes42[:]...)

	// Offset (2) 'ListOfFixed'
	dst = ssz.WriteOffset(dst, offset)
	offset += len(c.ListOfFixed) * 47

	// Field (3) 'TwentyUint32s'
	for ii := 0; ii < 20; ii++ {
		dst = ssz.MarshalUint32(dst, c.TwentyUint32s[ii])
	}

	// Field (4) 'OneFixedContainer'
	if c.OneFixedContainer == nil {
		c.OneFixedContainer = new(FixedContainer)
	}
	if dst, err = c.OneFixedContainer.MarshalSSZTo(dst); err != nil {
		return
	}

	// Offset (5) 'ListOfVariable'
	dst = ssz.WriteOffset(dst, offset)
	for ii := 0; ii < len(c.ListOfVariable); ii++ {
		offset += 4
		offset += c.ListOfVariable[ii].SizeSSZ()
	}

	// Offset (6) 'OneVariable'
	dst = ssz.WriteOffset(dst, offset)

	// Field (2) 'ListOfFixed'
	if size := len(c.ListOfFixed); size > 64 {
		err = ssz.ErrListTooBigFn("ComplexContainer.ListOfFixed", size, 64)
		return
	}
	for ii := 0; ii < len(c.ListOfFixed); ii++ {
		if dst, err = c.ListOfFixed[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (5) 'ListOfVariable'
	if size := len(c.ListOfVariable); size > 64 {
		err = ssz.ErrListTooBigFn("ComplexContainer.ListOfVariable", size, 64)
		return
	}
	{
		offset = 4 * len(c.ListOfVariable)
		for ii := 0; ii < len(c.ListOfVariable); ii++ {
			dst = ssz.WriteOffset(dst, offset)
			offset += c.ListOfVariable[ii].SizeSSZ()
		}
	}
	for ii := 0; ii < len(c.ListOfVariable); ii++ {
		if dst, err = c.ListOfVariable[ii].MarshalSSZTo(dst); err != nil {
			return
		}
	}

	// Field (6) 'OneVariable'
	if dst, err = c.OneVariable.MarshalSSZTo(dst); err != nil {
		return
	}

	return
}

// UnmarshalSSZ ssz unmarshals the ComplexContainer object
func (c *ComplexContainer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 189 {
		return ssz.ErrSize
	}

	tail := buf
	var o2, o5, o6 uint64

	// Field (0) 'One'
	c.One = ssz.UnmarshallUint64(buf[0:8])

	// Field (1) 'Bytes42'
	copy(c.Bytes42[:], buf[8:50])

	// Offset (2) 'ListOfFixed'
	if o2 = ssz.ReadOffset(buf[50:54]); o2 > size {
		return ssz.ErrOffset
	}

	if o2 < 189 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (3) 'TwentyUint32s'
	c.TwentyUint32s = ssz.ExtendUint32(c.TwentyUint32s, 20)
	for ii := 0; ii < 20; ii++ {
		c.TwentyUint32s[ii] = ssz.UnmarshallUint32(buf[54:134][ii*4 : (ii+1)*4])
	}

	// Field (4) 'OneFixedContainer'
	if c.OneFixedContainer == nil {
		c.OneFixedContainer = new(FixedContainer)
	}
	if err = c.OneFixedContainer.UnmarshalSSZ(buf[134:181]); err != nil {
		return err
	}

	// Offset (5) 'ListOfVariable'
	if o5 = ssz.ReadOffset(buf[181:185]); o5 > size || o2 > o5 {
		return ssz.ErrOffset
	}

	// Offset (6) 'OneVariable'
	if o6 = ssz.ReadOffset(buf[185:189]); o6 > size || o5 > o6 {
		return ssz.ErrOffset
	}

	// Field (2) 'ListOfFixed'
	{
		buf = tail[o2:o5]
		num, err := ssz.DivideInt2(len(buf), 47, 64)
		if err != nil {
			return err
		}
		c.ListOfFixed = make([]*FixedContainer, num)
		for ii := 0; ii < num; ii++ {
			if c.ListOfFixed[ii] == nil {
				c.ListOfFixed[ii] = new(FixedContainer)
			}
			if err = c.ListOfFixed[ii].UnmarshalSSZ(buf[ii*47 : (ii+1)*47]); err != nil {
				return err
			}
		}
	}

	// Field (5) 'ListOfVariable'
	{
		buf = tail[o5:o6]
		num, err := ssz.DecodeDynamicLength(buf, 64)
		if err != nil {
			return err
		}
		c.ListOfVariable = make([]*VariableContainer, num)
		err = ssz.UnmarshalDynamic(buf, num, func(indx int, buf []byte) (err error) {
			if c.ListOfVariable[indx] == nil {
				c.ListOfVariable[indx] = new(VariableContainer)
			}
			if err = c.ListOfVariable[indx].UnmarshalSSZ(buf); err != nil {
				return err
			}
			return nil
		})
		if err != nil {
			return err
		}
	}

	// Field (6) 'OneVariable'
	{
		buf = tail[o6:]
		if c.OneVariable == nil {
			c.OneVariable = new(VariableContainer)
		}
		if err = c.OneVariable.UnmarshalSSZ(buf); err != nil {
			return err
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the ComplexContainer object
func (c *ComplexContainer) SizeSSZ() (size int) {
	size = 189

	// Field (2) 'ListOfFixed'
	size += len(c.ListOfFixed) * 47

	// Field (5) 'ListOfVariable'
	for ii := 0; ii < len(c.ListOfVariable); ii++ {
		size += 4
		size += c.ListOfVariable[ii].SizeSSZ()
	}

	// Field (6) 'OneVariable'
	if c.OneVariable == nil {
		c.OneVariable = new(VariableContainer)
	}
	size += c.OneVariable.SizeSSZ()

	return
}

// HashTreeRoot ssz hashes the ComplexContainer object
func (c *ComplexContainer) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(c)
}

// HashTreeRootWith ssz hashes the ComplexContainer object with a hasher
func (c *ComplexContainer) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'One'
	hh.PutUint64(c.One)

	// Field (1) 'Bytes42'
	hh.PutBytes(c.Bytes42[:])

	// Field (2) 'ListOfFixed'
	{
		subIndx := hh.Index()
		num := uint64(len(c.ListOfFixed))
		if num > 64 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.ListOfFixed {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 64)
	}

	// Field (3) 'TwentyUint32s'
	{
		subIndx := hh.Index()
		for _, i := range c.TwentyUint32s {
			hh.AppendUint32(i)
		}
		hh.Merkleize(subIndx)
	}

	// Field (4) 'OneFixedContainer'
	if c.OneFixedContainer == nil {
		c.OneFixedContainer = new(FixedContainer)
	}
	if err = c.OneFixedContainer.HashTreeRootWith(hh); err != nil {
		return
	}

	// Field (5) 'ListOfVariable'
	{
		subIndx := hh.Index()
		num := uint64(len(c.ListOfVariable))
		if num > 64 {
			err = ssz.ErrIncorrectListSize
			return
		}
		for _, elem := range c.ListOfVariable {
			if err = elem.HashTreeRootWith(hh); err != nil {
				return
			}
		}
		hh.MerkleizeWithMixin(subIndx, num, 64)
	}

	// Field (6) 'OneVariable'
	if err = c.OneVariable.HashTreeRootWith(hh); err != nil {
		return
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the ComplexContainer object
func (c *ComplexContainer) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(c)
}

// MarshalSSZ ssz marshals the FixedContainer object
func (f *FixedContainer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(f)
}

// MarshalSSZTo ssz marshals the FixedContainer object to a target array
func (f *FixedContainer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf

	// Field (0) 'Two'
	dst = ssz.MarshalUint8(dst, f.Two)

	// Field (1) 'Three'
	dst = ssz.MarshalUint32(dst, f.Three)

	// Field (2) 'Bytes42'
	dst = append(dst, f.Bytes42[:]...)

	return
}

// UnmarshalSSZ ssz unmarshals the FixedContainer object
func (f *FixedContainer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size != 47 {
		return ssz.ErrSize
	}

	// Field (0) 'Two'
	f.Two = ssz.UnmarshallUint8(buf[0:1])

	// Field (1) 'Three'
	f.Three = ssz.UnmarshallUint32(buf[1:5])

	// Field (2) 'Bytes42'
	copy(f.Bytes42[:], buf[5:47])

	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the FixedContainer object
func (f *FixedContainer) SizeSSZ() (size int) {
	size = 47
	return
}

// HashTreeRoot ssz hashes the FixedContainer object
func (f *FixedContainer) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(f)
}

// HashTreeRootWith ssz hashes the FixedContainer object with a hasher
func (f *FixedContainer) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'Two'
	hh.PutUint8(f.Two)

	// Field (1) 'Three'
	hh.PutUint32(f.Three)

	// Field (2) 'Bytes42'
	hh.PutBytes(f.Bytes42[:])

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the FixedContainer object
func (f *FixedContainer) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(f)
}

// MarshalSSZ ssz marshals the VariableContainer object
func (v *VariableContainer) MarshalSSZ() ([]byte, error) {
	return ssz.MarshalSSZ(v)
}

// MarshalSSZTo ssz marshals the VariableContainer object to a target array
func (v *VariableContainer) MarshalSSZTo(buf []byte) (dst []byte, err error) {
	dst = buf
	offset := int(4)

	// Offset (0) 'SomeBytes20'
	dst = ssz.WriteOffset(dst, offset)

	// Field (0) 'SomeBytes20'
	if size := len(v.SomeBytes20); size > 12 {
		err = ssz.ErrListTooBigFn("VariableContainer.SomeBytes20", size, 12)
		return
	}
	for ii := 0; ii < len(v.SomeBytes20); ii++ {
		dst = append(dst, v.SomeBytes20[ii][:]...)
	}

	return
}

// UnmarshalSSZ ssz unmarshals the VariableContainer object
func (v *VariableContainer) UnmarshalSSZ(buf []byte) error {
	var err error
	size := uint64(len(buf))
	if size < 4 {
		return ssz.ErrSize
	}

	tail := buf
	var o0 uint64

	// Offset (0) 'SomeBytes20'
	if o0 = ssz.ReadOffset(buf[0:4]); o0 > size {
		return ssz.ErrOffset
	}

	if o0 < 4 {
		return ssz.ErrInvalidVariableOffset
	}

	// Field (0) 'SomeBytes20'
	{
		buf = tail[o0:]
		num, err := ssz.DivideInt2(len(buf), 20, 12)
		if err != nil {
			return err
		}
		v.SomeBytes20 = make([][20]byte, num)
		for ii := 0; ii < num; ii++ {
			copy(v.SomeBytes20[ii][:], buf[ii*20:(ii+1)*20])
		}
	}
	return err
}

// SizeSSZ returns the ssz encoded size in bytes for the VariableContainer object
func (v *VariableContainer) SizeSSZ() (size int) {
	size = 4

	// Field (0) 'SomeBytes20'
	size += len(v.SomeBytes20) * 20

	return
}

// HashTreeRoot ssz hashes the VariableContainer object
func (v *VariableContainer) HashTreeRoot() ([32]byte, error) {
	return ssz.HashWithDefaultHasher(v)
}

// HashTreeRootWith ssz hashes the VariableContainer object with a hasher
func (v *VariableContainer) HashTreeRootWith(hh ssz.HashWalker) (err error) {
	indx := hh.Index()

	// Field (0) 'SomeBytes20'
	{
		if size := len(v.SomeBytes20); size > 12 {
			err = ssz.ErrListTooBigFn("VariableContainer.SomeBytes20", size, 12)
			return
		}
		subIndx := hh.Index()
		for _, i := range v.SomeBytes20 {
			hh.PutBytes(i[:])
		}
		numItems := uint64(len(v.SomeBytes20))
		hh.MerkleizeWithMixin(subIndx, numItems, 12)
	}

	hh.Merkleize(indx)
	return
}

// GetTree ssz hashes the VariableContainer object
func (v *VariableContainer) GetTree() (*ssz.Node, error) {
	return ssz.ProofTree(v)
}
